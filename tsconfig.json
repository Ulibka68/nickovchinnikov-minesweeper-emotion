{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    //    https://www.staging-typescript.org/tsconfig#target
    "target": "ES5",                             /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'. */

    //    CommonJS (default if target is ES3 or ES5),
    "module": "commonjs",                           /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    "moduleResolution": "node",    /* Default:  module === AMD or UMD or System or ES6, then Classic    Otherwise Node*/


    //    https://www.staging-typescript.org/tsconfig#lib
    "lib": ["dom", "dom.iterable", "esnext"], /* Specify library files to be included in the compilation. */

    "jsx": "preserve",                           /* Specify JSX code generation: 'preserve', 'react-native', 'react', 'react-jsx' or 'react-jsxdev'. */
    "strict": true,                                 /* Enable all strict type-checking options. */
    "baseUrl": "./",                             /* Base directory to resolve non-absolute module names. */
    "paths": {
      "@/*": [
        "src/*"
      ]
    },                                 /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    "esModuleInterop": true,                        /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "skipLibCheck": true,                           /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true,        /* Disallow inconsistently-cased references to the same file. */


    "allowJs": true,                          /* Allow JavaScript files to be imported inside your project */
    "allowSyntheticDefaultImports": true,     /*allows you to write an import like:     import React from "react";     instead of:     import * as React from "react";*/

    // Ensure that Babel can safely transpile files in the TypeScript project
    "isolatedModules": true,       /* если я правильно понял - не экспортировоать типы для js*/


    /*
      The downside to using babel is that you don’t get type checking during the transition from TS to JS.
      This can mean that type errors which you miss in your editor could sneak through into production code.
      */

    /*
    https://www.typescriptlang.org/docs/handbook/babel-with-typescript.html
    Ensure that .d.ts files are created by tsc, but not .js files
    Generate .d.ts files for every TypeScript or JavaScript file inside your project.
    These .d.ts files are type definition files which describe the external API of your module.
    With .d.ts files, tools like TypeScript can provide intellisense and accurate types for un-typed code.*/
    //    "declaration": true,

    /*
    Only emit .d.ts files; do not emit .js files.
    This setting is useful in two cases:
    You are using a transpiler other than TypeScript to generate your JavaScript.
    You are using TypeScript to only generate d.ts files for your consumers.
    */
    //    "emitDeclarationOnly": true,

    /*
      Do not emit compiler output files like JavaScript source code, source-maps or declarations.
      This makes room for another tool like Babel, or swc to handle converting the TypeScript file to a file which can run inside a JavaScript environment.
      You can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.,

      Default: false,
    */
    //    "noEmit": true,

    /*Report errors for fallthrough cases in switch statements. Ensures that any non-empty case inside a switch statement includes either break or return.
    This means you won’t accidentally ship a case fallthrough bug.*/
    "noFallthroughCasesInSwitch": true,

    /*Allows importing modules with a ‘.json’ extension, which is a common practice in node projects.
    This includes generating a type for the import based on the static JSON shape.
    TypeScript does not support resolving JSON files by default:*/
    "resolveJsonModule": true,

    //    декораторы
    //    emitDecoratorMetadata и experimentalDecorators
  }
}
